@startuml

skinparam class {
    BackgroundColor white
    ArrowColor black
    BorderColor black
}

' Core Classes
class DatabaseConnectionFactory {
    -instance: DatabaseConnectionFactory
    -connections: Map<String, DatabaseConnection>
    +getInstance(): DatabaseConnectionFactory
    +getConnection(type: String): DatabaseConnection
    +registerConnection(type: String, connection: DatabaseConnection)
    +closeAllConnections()
}

note right of DatabaseConnectionFactory
    Singleton Pattern:
    Ensures single instance of connection factory
end note

class Logger {
    -instance: Logger
    -logFile: String
    -logLevel: LogLevel
    +getInstance(): Logger
    +log(message: String)
    +error(message: String, exception: Exception)
    +setLogLevel(level: LogLevel)
}

note right of Logger
    Singleton Pattern:
    Single logger instance for entire application
end note

interface ConnectionFactory {
    +createConnection(type: String): DatabaseConnection
    +getConnectionConfig(type: String): ConnectionConfig
    +supportedDatabases(): List<String>
}

note right of ConnectionFactory
    Factory Pattern:
    Creates different types of database connections
end note

abstract class DatabaseConnection {
    -url: String
    -username: String
    -password: String
    -connection: Connection
    +connect(): Connection
    +disconnect()
    +isConnected(): Boolean
}

class SQLiteConnection extends DatabaseConnection {
    -filePath: String
    +createConnection(): Connection
}

class PostgresConnection extends DatabaseConnection {
    -schema: String
    +createConnection(): Connection
    +setSearchPath(schema: String)
}

class MySQLConnection extends DatabaseConnection {
    -charset: String
    +createConnection(): Connection
    +setCharset(charset: String)
}

abstract class Table {
    -name: String
    -columns: List<Column<*>>
    -constraints: List<Constraint>
    -indices: List<Index>
    #integer(name: String): Column<Int>
    #varchar(name: String, length: Int): Column<String>
    #boolean(name: String): Column<Boolean>
    #decimal(name: String, precision: Int, scale: Int): Column<BigDecimal>
    #text(name: String): Column<String>
    #date(name: String): Column<LocalDate>
}

class PhysicalTable extends Table {
    -tableName: String
    -schema: String
}

class VirtualTable extends Table {
    -sourceOperation: TableOperation
    -resultColumns: List<Column<*>>
    +getSourceOperation(): TableOperation
}

abstract class TableOperation {
    #leftSource: Table
    #rightSource: Table?
    #resultColumns: List<Column<*>>
    +getResultColumns(): List<Column<*>>
    +generateSQL(): String
}

class UnionOperation extends TableOperation {
    -isUnionAll: Boolean
    +unionAll(): UnionOperation
}

class JoinOperation extends TableOperation {
    -joinType: JoinType
    -joinCondition: Condition
}

class ExceptOperation extends TableOperation {
    -isExceptAll: Boolean
    +exceptAll(): ExceptOperation
}

class IntersectOperation extends TableOperation {
    -isIntersectAll: Boolean
    +intersectAll(): IntersectOperation
}

enum JoinType {
    INNER
    LEFT
    RIGHT
    FULL
    CROSS
}

class TableScanner {
    -connection: DatabaseConnection
    -logger: Logger
    +scanTable(tableName: String): PhysicalTable 
    +scanAllTables(): List<PhysicalTable>
    -extractColumns(metadata: ResultSetMetaData): List<Column<*>>
    -extractConstraints(tableName: String): List<Constraint>
    -extractIndices(tableName: String): List<Index>
    -mapSQLTypeToColumn(sqlType: Int, typeName: String): Column<*>
}

class DatabaseMetadata {
    -connection: DatabaseConnection
    +getColumns(tableName: String): ResultSet
    +getPrimaryKeys(tableName: String): ResultSet
    +getForeignKeys(tableName: String): ResultSet
    +getIndices(tableName: String): ResultSet
    +getConstraints(tableName: String): ResultSet
}

class Column<T> {
    -name: String
    -table: Table
    -sqlType: SQLDataType
    -nullable: Boolean
    -defaultValue: T?
    -autoIncrement: Boolean
    -length: Int?
    -precision: Int?
    +nullable(): Column<T>
    +default(value: T): Column<T>
    +autoIncrement(): Column<T>
    +references(column: Column<T>): Column<T>
}

abstract class Constraint {
    -name: String
    -columns: List<Column<*>>
    +validate(value: Any): Boolean
    +generateSQL(): String
}

class CheckConstraint extends Constraint {
    -condition: String
    -errorMessage: String
}

class UniqueConstraint extends Constraint {
    -enforceIndex: Boolean
}

class ForeignKeyConstraint extends Constraint {
    -referencedTable: Table
    -referencedColumns: List<Column<*>>
    -onDelete: ReferentialAction
    -onUpdate: ReferentialAction
}

enum ReferentialAction {
    CASCADE
    RESTRICT
    SET_NULL
    SET_DEFAULT
    NO_ACTION
}

enum SQLDataType {
    INTEGER
    VARCHAR
    BOOLEAN
    DECIMAL
    TEXT
    DATE
}

class Index {
    -name: String
    -columns: List<Column<*>>
    -unique: Boolean
    +generateSQL(): String
}

class QueryBuilder {
    -logger: Logger
    +select(): SelectQueryBuilder
    +insert(): InsertQueryBuilder
    +update(): UpdateQueryBuilder
    +delete(): DeleteQueryBuilder
    +createTable(): CreateTableQueryBuilder
    +alterTable(): AlterTableQueryBuilder
    +dropTable(): DropTableQueryBuilder
}

note right of QueryBuilder
    Builder Pattern:
    Provides fluent interface for constructing 
    different types of database queries
end note

class SelectQueryBuilder {
    -table: Table
    -columns: List<Column<*>>
    +columns(vararg columns: Column<*>): SelectQueryBuilder
    +where(condition: (Table) -> Condition): SelectQueryBuilder
    +build(): SelectQueryStrategy
}

class InsertQueryBuilder {
    -table: Table
    -columns: List<Column<*>>
    +columns(vararg columns: Column<*>): InsertQueryBuilder
    +values(values: Map<Column<*>, Any>): InsertQueryBuilder
    +build(): InsertQueryStrategy
}

class UpdateQueryBuilder {
    -table: Table
    -values: Map<Column<*>, Any>
    +set(column: Column<*>, value: Any): UpdateQueryBuilder
    +where(condition: (Table) -> Condition): UpdateQueryBuilder
    +build(): UpdateQueryStrategy
}

class DeleteQueryBuilder {
    -table: Table
    +where(condition: (Table) -> Condition): DeleteQueryBuilder
    +build(): DeleteQueryStrategy
}

class CreateTableQueryBuilder {
    -table: Table
    +build(): CreateTableQueryStrategy
}

class AlterTableQueryBuilder {
    -table: Table
    -alterations: List<Alteration>
    +addColumn(column: Column<*>): AlterTableQueryBuilder
    +dropColumn(name: String): AlterTableQueryBuilder
    +build(): AlterTableQueryStrategy
}

class DropTableQueryBuilder {
    -table: Table
    +build(): DropTableQueryStrategy
}

interface QueryStrategy {
    +execute(connection: DatabaseConnection): ResultSet
    +buildQuery(): String
}

note right of QueryStrategy
    Strategy Pattern:
    Encapsulates different algorithms
    for executing database queries
end note

class SelectQueryStrategy implements QueryStrategy {
    -table: Table
    -columns: List<Column<*>>
    -condition: Condition?
    +execute(connection: DatabaseConnection): ResultSet
    +buildQuery(): String
}

class InsertQueryStrategy implements QueryStrategy {
    -table: Table
    -columns: List<Column<*>>
    -values: Map<Column<*>, Any>
    +execute(connection: DatabaseConnection): ResultSet
    +buildQuery(): String
}

class UpdateQueryStrategy implements QueryStrategy {
    -table: Table
    -values: Map<Column<*>, Any>
    -condition: Condition?
    +execute(connection: DatabaseConnection): ResultSet
    +buildQuery(): String
}

class DeleteQueryStrategy implements QueryStrategy {
    -table: Table
    -condition: Condition?
    +execute(connection: DatabaseConnection): ResultSet
    +buildQuery(): String
}

class CreateTableQueryStrategy implements QueryStrategy {
    -table: Table
    +execute(connection: DatabaseConnection): ResultSet
    +buildQuery(): String
}

class AlterTableQueryStrategy implements QueryStrategy {
    -table: Table
    -alterations: List<Alteration>
    +execute(connection: DatabaseConnection): ResultSet
    +buildQuery(): String
}

class DropTableQueryStrategy implements QueryStrategy {
    -table: Table
    +execute(connection: DatabaseConnection): ResultSet
    +buildQuery(): String
}

' Relationships
DatabaseConnectionFactory --> DatabaseConnection
DatabaseConnectionFactory --> Logger
ConnectionFactory --> DatabaseConnection
DatabaseConnectionFactory ..> ConnectionFactory : uses

VirtualTable --> TableOperation
TableOperation --> Table : sources


Table --> Column : contains
Table --> Constraint : has
Table --> Index : has

Column --> SQLDataType : uses
Constraint --> Column : references
ForeignKeyConstraint --> Table : references

TableScanner --> DatabaseConnection : uses
TableScanner --> Logger : uses
TableScanner --> DatabaseMetadata : reads
TableScanner --> PhysicalTable : creates
DatabaseMetadata --> DatabaseConnection : reads from

QueryBuilder --> SelectQueryBuilder
QueryBuilder --> InsertQueryBuilder
QueryBuilder --> UpdateQueryBuilder
QueryBuilder --> DeleteQueryBuilder
QueryBuilder --> CreateTableQueryBuilder
QueryBuilder --> AlterTableQueryBuilder
QueryBuilder --> DropTableQueryBuilder
QueryBuilder --> Table : uses structure

SelectQueryBuilder ..> SelectQueryStrategy : creates
InsertQueryBuilder ..> InsertQueryStrategy : creates
UpdateQueryBuilder ..> UpdateQueryStrategy : creates
DeleteQueryBuilder ..> DeleteQueryStrategy : creates
CreateTableQueryBuilder ..> CreateTableQueryStrategy : creates
AlterTableQueryBuilder ..> AlterTableQueryStrategy : creates
DropTableQueryBuilder ..> DropTableQueryStrategy : creates

QueryStrategy --> DatabaseConnection : executes through
QueryBuilder --> Logger

SelectQueryBuilder --> Logger
InsertQueryBuilder --> Logger
UpdateQueryBuilder --> Logger
DeleteQueryBuilder --> Logger
CreateTableQueryBuilder --> Logger
AlterTableQueryBuilder --> Logger
DropTableQueryBuilder --> Logger

JoinOperation --> JoinType : uses
ForeignKeyConstraint --> ReferentialAction : uses
@enduml
